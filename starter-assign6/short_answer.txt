Assignment 6
Pair programming:
Gonzalo Aguilar - gonzaloa
Pascual Camacho - ecam
---------------------------

Sorting Linked Lists
---------------------
Q1. If the `deallocateList` utility function were implemented recursively, give a rough estimate of the maximum length list it could successfully handle. What would be the observed result from attempting to deallocate a list longer than this maximum?
A1. The system would crash if the function were passed a list longer than 43273, which is the value we got from Assignment 3 (likely from the way we configured our system, since it is below other QT configurations).

Q2. The prototypes for the quicksort function takes a `ListNode*` by reference. Explain why the pointer itself needs to be passed by reference and what the consequence would be if it were not.
A2. quickSort is a void function, thus, it does not return any value. For this reason, the parameters to the function have to be passed by reference. This also helps with the memory of the computer, if a pointer was not passed by reference, it would create a copy of it.


Q3. Run time trials and provide your results that confirm that QuickSort is O(NlogN) . Verify the runtime degrades to O(N^2) on inputs constructed to trigger the worst case behavior.
A3. By using startSize = 500,000, the quickSort algorithm degraded to O(n^2) when 2 million elements were sorted, as the results below show in row #3.

Row
-1-	Line 517 TIME_OPERATION quickSort(list) (size = 500000) completed in    0.318 secs
-2-	Line 517 TIME_OPERATION quickSort(list) (size =1000000) completed in    0.908 secs
-3-	Line 517 TIME_OPERATION quickSort(list) (size =2000000) completed in     2.47 secs
-4-	Line 517 TIME_OPERATION quickSort(list) (size =4000000) completed in    5.905 secs


Q4. Run the provided timing trials that compare your linked list QuickSort to a Vector sort on the same sequence and report the results. Who wins and why?
A4. As shown, it's really hard not to make a case for quickSort, even as its performance degrades with more than 2 million elements, it still completes the operation much faster than the Vector sort.

Results:
    Line 517 TIME_OPERATION quickSort(list) (size = 500000) completed in    0.318 secs
    Line 518 TIME_OPERATION v.sort() (size = 500000) completed in    1.988 secs
    Line 517 TIME_OPERATION quickSort(list) (size =1000000) completed in    0.908 secs
    Line 518 TIME_OPERATION v.sort() (size =1000000) completed in    3.635 secs
    Line 517 TIME_OPERATION quickSort(list) (size =2000000) completed in     2.47 secs
    Line 518 TIME_OPERATION v.sort() (size =2000000) completed in    7.078 secs
    Line 517 TIME_OPERATION quickSort(list) (size =4000000) completed in    5.905 secs
    Line 518 TIME_OPERATION v.sort() (size =4000000) completed in    12.58 secs
